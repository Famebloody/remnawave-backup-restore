#!/bin/bash

echo "Running with bash version: $BASH_VERSION"

set -e

INSTALL_DIR="/opt/rw-backup-restore"
BACKUP_DIR="$INSTALL_DIR/backup"
CONFIG_FILE="$INSTALL_DIR/config.env"
SCRIPT_NAME="backup_and_notify.sh"
SCRIPT_PATH="$INSTALL_DIR/$SCRIPT_NAME"
RETAIN_BACKUPS_DAYS=7
SYMLINK_PATH="/usr/local/bin/rw-backup"

COLOR="\e[1;37m"
RED="\e[31m"
GREEN="\e[32m"
RESET="\e[0m"

print_ascii_art() {
    if command -v toilet &> /dev/null; then
        echo -e "$COLOR"
        toilet -f standard -F metal "remnawave"
        echo -e "$RESET"
    else
        echo "remnawave"
        echo "---------------------------"
    fi
}

install_dependencies() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    if [[ $EUID -ne 0 ]]; then
        echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å sudo –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root."
        exit 1
    fi

    if command -v apt-get &> /dev/null; then
        apt-get update -qq > /dev/null 2>&1 || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤."; exit 1; }
        apt-get install -y toilet curl docker.io gzip > /dev/null 2>&1 || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤."; exit 1; }
        echo "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ apt-get. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ toilet, curl, docker.io –∏ gzip –≤—Ä—É—á–Ω—É—é."
        command -v curl &> /dev/null || { echo "curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ."; exit 1; }
        command -v docker &> /dev/null || { echo "docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ."; exit 1; }
        command -v gzip &> /dev/null || { echo "gzip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ."; exit 1; }
        echo "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã (–∫—Ä–æ–º–µ toilet) –Ω–∞–π–¥–µ–Ω—ã."
    fi
}

load_or_create_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ $CONFIG_FILE..."
        source "$CONFIG_FILE"
        if [[ -z "$BOT_TOKEN" || -z "$CHAT_ID" || -z "$DB_USER" ]]; then
            echo "–í —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (BOT_TOKEN, CHAT_ID, DB_USER)."
            echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ $CONFIG_FILE –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            exit 1
        fi
    else
        echo "=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é ==="
        read -rp "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: " BOT_TOKEN
        read -rp "–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID: " CHAT_ID
        read -rp "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é postgres): " DB_USER
        DB_USER=${DB_USER:-postgres}

        mkdir -p "$INSTALL_DIR" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ $INSTALL_DIR."; exit 1; }
        mkdir -p "$BACKUP_DIR" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ $BACKUP_DIR."; exit 1; }

        cat > "$CONFIG_FILE" <<EOF
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"
DB_USER="$DB_USER"
EOF

        chmod 600 "$CONFIG_FILE" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è $CONFIG_FILE."; exit 1; }
        echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $CONFIG_FILE"
    fi
}

escape_markdown_v2() {
    local text="$1"
    echo "$text" | sed \
        -e 's/\\/\\\\/g' \
        -e 's/_/\\_/g' \
        -e 's/\[/\\[/g' \
        -e 's/\]/\\]/g' \
        -e 's/(/\\(/g' \
        -e 's/)/\\)/g' \
        -e 's/~/\~/g' \
        -e 's/`/\\`/g' \
        -e 's/>/\\>/g' \
        -e 's/#/\\#/g' \
        -e 's/+/\\+/g' \
        -e 's/-/\\-/g' \
        -e 's/=/\\=/g' \
        -e 's/|/\\|/g' \
        -e 's/{/\\{/g' \
        -e 's/}/\\}/g' \
        -e 's/\./\\./g' \
        -e 's/!/\!/g'
}

send_telegram_message() {
    local message="$1"
    local parse_mode="${2:-MarkdownV2}"
    local escaped_message
    escaped_message=$(escape_markdown_v2 "$message")

    local http_code=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d text="$escaped_message" \
        -d parse_mode="$parse_mode" \
        -w "%{http_code}" -o /dev/null 2>&1)

    if [[ "$http_code" -eq 200 ]]; then
        return 0
    else
        echo "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. HTTP –∫–æ–¥: $http_code"
        return 1
    fi
}

send_telegram_document() {
    local file_path="$1"
    local caption="$2"
    local parse_mode="MarkdownV2"
    local escaped_caption
    escaped_caption=$(escape_markdown_v2 "$caption")

    local api_response=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendDocument" \
        -F chat_id="$CHAT_ID" \
        -F document=@"$file_path" \
        -F parse_mode="$parse_mode" \
        -F caption="$escaped_caption" \
        -w "%{http_code}" -o /dev/null 2>&1)

    local curl_status=$?

    if [ $curl_status -ne 0 ]; then
        echo "‚ùå –û—à–∏–±–∫–∞ CURL –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $curl_status"
        return 1
    fi

    local http_code="${api_response: -3}"

    if [[ "$http_code" -eq 200 ]]; then
        return 0
    else
        echo "‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É HTTP. –ö–æ–¥: $http_code"
        return 1
    fi
}


create_backup() {
    echo "üíæ –ó–∞–ø–∏—Å—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."

    mkdir -p "$BACKUP_DIR" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—ç–∫–∞–ø–æ–≤ $BACKUP_DIR."; send_telegram_message "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±—ç–∫–∞–ø–æ–≤ $BACKUP_DIR." "None"; exit 1; }

    DATE=$(date +'%Y-%m-%d %H:%M:%S')
    TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
    FILENAME="remnawave-db-${TIMESTAMP}.sql.gz"
    FULL_PATH="$BACKUP_DIR/$FILENAME"

    if ! docker inspect remnawave-db > /dev/null 2>&1 || ! docker container inspect -f '{{.State.Running}}' remnawave-db 2>/dev/null | grep -q "true"; then
        echo "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        send_telegram_message "‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø." "None"; exit 1
    fi
    
    if ! docker exec -i remnawave-db pg_dumpall -c -U "$DB_USER" | gzip -9 > "$FULL_PATH"; then
        STATUS=$?
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $STATUS"
        send_telegram_message "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ Remnawave DB. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${STATUS}" "None"; exit $STATUS
    fi

    echo -e "‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ø—É—Ç–∏:\n $FULL_PATH"

    echo -e "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤\n(–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ $RETAIN_BACKUPS_DAYS –¥–Ω–µ–π)..."
    find "$BACKUP_DIR" -maxdepth 1 -name "remnawave-db-*.sql.gz" -mtime +$RETAIN_BACKUPS_DAYS -delete

    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞ –≤ Telegram..."
    local caption_text=$'üíæ#backup_success\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚úÖ *The backup has been created*\nüìÖDate: '"${DATE}"

    if [[ -f "$FULL_PATH" ]]; then
        if send_telegram_document "$FULL_PATH" "$caption_text"; then
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞ –≤ Telegram. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã—à–µ."
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: $FULL_PATH"
        send_telegram_message "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${FILENAME}" "None"; exit 1
    fi
}

setup_auto_send() {
    while true; do
        echo ""
        echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ==="
        echo "1) –í–∫–ª—é—á–∏—Ç—å"
        echo "2) –í—ã–∫–ª—é—á–∏—Ç—å"
        echo "3) –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
        read -rp "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: " choice
        case $choice in
            1)
                read -rp "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03:00 15:00 ): " times
                valid_times=()
                invalid_format=false
                IFS=' ' read -ra arr <<< "$times"
                for t in "${arr[@]}"; do
                    if [[ $t =~ ^([0-9]{1,2}):([0-9]{2})$ ]]; then
                        hour=${BASH_REMATCH[1]}
                        min=${BASH_REMATCH[2]}
                        if (( 10#$hour >= 0 && 10#$hour <= 23 && 10#$min >= 0 && 10#$min <= 59 )); then
                            valid_times+=("$min $hour")
                        else
                            echo "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: $t (—á–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59)"
                            invalid_format=true
                            break
                        fi
                    else
                        echo "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: $t (–æ–∂–∏–¥–∞–µ—Ç—Å—è HH:MM)"
                        invalid_format=true
                        break
                    fi
                done

                if [ "$invalid_format" = true ] || [ ${#valid_times[@]} -eq 0 ]; then
                    echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."
                    continue
                fi

                echo "‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏..."
                (crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH") | crontab -

                for time_entry in "${valid_times[@]}"; do
                    (crontab -l 2>/dev/null; echo "$time_entry * * * $SCRIPT_PATH backup") | crontab -
                done

                sed -i '/^CRON_TIMES=/d' "$CONFIG_FILE"
                echo "CRON_TIMES=\"$times\"" >> "$CONFIG_FILE"
                echo "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: $times"
                ;;
            2)
                echo "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏..."
                crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" | crontab -
                sed -i '/^CRON_TIMES=/d' "$CONFIG_FILE"
                echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
                ;;
            3) break ;;
            *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥." ;;
        esac
        read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

restore_backup() {
    echo -e ""
    echo -e "=== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ ==="
    echo -e "${RED}!!! –í–ù–ò–ú–ê–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Remnawave !!!${RESET}"
    echo -e "–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ (*.sql.gz) –≤ –ø–∞–ø–∫—É: $BACKUP_DIR"
    echo -e "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞"
    echo -e ""

    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –≤ $BACKUP_DIR:"
    BACKUP_FILES=("$BACKUP_DIR"/remnawave-db-*.sql.gz)
    if [ ${#BACKUP_FILES[@]} -eq 0 ] || [ ! -f "${BACKUP_FILES[0]}" ]; then
        echo "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤ –≤ $BACKUP_DIR."
        read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        return
    fi

    readarray -t SORTED_BACKUP_FILES < <(ls -t "$BACKUP_DIR"/remnawave-db-*.sql.gz 2>/dev/null)

    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
    select SELECTED_BACKUP in "${SORTED_BACKUP_FILES[@]}"; do
        if [[ -n "$SELECTED_BACKUP" ]]; then
            echo "–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: $SELECTED_BACKUP"
            break
        else
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."
        fi
    done

    echo -e $'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n–í–≤–µ–¥–∏—Ç–µ '"${GREEN}Y${RESET}"$' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '
    read -r confirm_restore

    if [[ "${confirm_restore,,}" != "y" ]]; then
        echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        return
    fi

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é..."

    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Remnawave..."
    if ! cd /opt/remnawave; then
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ /opt/remnawave. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª docker-compose.yml –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–∞–º."
        local error_msg="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ /opt/remnawave."
        local escaped_error_msg=$(escape_markdown_v2 "$error_msg")
        send_telegram_message "$escaped_error_msg" "MarkdownV2"; return
    fi

    if ! docker compose stop; then
           echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã docker compose. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î."
           local warning_msg="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã docker compose. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î."
           local escaped_warning_msg=$(escape_markdown_v2 "$warning_msg")
           send_telegram_message "$escaped_warning_msg" "MarkdownV2"
    fi

      if ! docker container inspect -f '{{.State.Running}}' remnawave-db 2>/dev/null | grep -q "true"; then
        local error_prefix="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db' –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        local escaped_error_prefix=$(escape_markdown_v2 "$error_prefix")
        #send_telegram_message "$escaped_error_prefix" "MarkdownV2"

        echo "–ó–∞–ø—É—Å–∫ remnawave-db..."
        if ! docker compose up -d remnawave-db; then
            echo "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db'. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
            local critical_error_prefix="‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db'."
            local escaped_critical_error_prefix=$(escape_markdown_v2 "$critical_error_prefix")
            send_telegram_message "$escaped_critical_error_prefix" "MarkdownV2"; return
        fi
        sleep 5
          if ! docker container inspect -f '{{.State.Running}}' remnawave-db 2>/dev/null | grep -q "true"; then
              echo "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db' –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç–∞—Ä—Ç–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
              local critical_error_prefix_2="‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave-db' –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç–∞—Ä—Ç–∞."
              local escaped_critical_error_prefix_2=$(escape_markdown_v2 "$critical_error_prefix_2")
              send_telegram_message "$escaped_critical_error_prefix_2" "MarkdownV2"; return
          fi
    fi

      if ! docker exec -i remnawave-db psql -U "$DB_USER" -d postgres -c "SELECT 1;" > /dev/null 2>&1; then
          echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 'postgres' –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ 'remnawave-db' —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '$DB_USER'."
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î –≤ $CONFIG_FILE –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
          local db_connect_error_prefix="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ 'remnawave-db'."
          local escaped_db_connect_error_prefix=$(escape_markdown_v2 "$db_connect_error_prefix")
          send_telegram_message "$escaped_db_connect_error_prefix" "MarkdownV2"; return
      fi

    echo "üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
    if gunzip -c "$SELECTED_BACKUP" | docker exec -i remnawave-db psql -U "$DB_USER" -d postgres > /dev/null 2>&1; then
        echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        # Escape prefix, keep filename raw
        local restore_success_prefix="‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Remnawave DB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: "
        local restored_filename="${SELECTED_BACKUP##*/}"
        local escaped_restore_success_prefix=$(escape_markdown_v2 "$restore_success_prefix")
        local final_restore_success_message="${escaped_restore_success_prefix}${restored_filename}"
        send_telegram_message "$final_restore_success_message" "MarkdownV2"

    else
        STATUS=$?
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $STATUS"
        local restore_error_prefix="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Remnawave DB –∏–∑ —Ñ–∞–π–ª–∞: "
        local restored_filename_error="${SELECTED_BACKUP##*/}"
        local error_suffix=". –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${STATUS}"
        local escaped_restore_error_prefix=$(escape_markdown_v2 "$restore_error_prefix")
        local escaped_error_suffix=$(escape_markdown_v2 "$error_suffix")
        local final_restore_error_message="${escaped_restore_error_prefix}${restored_filename_error}${escaped_error_suffix}"
        send_telegram_message "$final_restore_error_message" "MarkdownV2"
    fi

    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Remnawave..."
    if ! docker compose up -d; then
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã docker compose –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        local docker_compose_error_prefix="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã docker compose –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        local escaped_docker_compose_error_prefix=$(escape_markdown_v2 "$docker_compose_error_prefix")
        send_telegram_message "$escaped_docker_compose_error_prefix" "MarkdownV2"
    else
        echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã Remnawave –∑–∞–ø—É—â–µ–Ω—ã."
    fi

}


setup_symlink() {
    echo ""
    echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ==="
    if [[ -L "$SYMLINK_PATH" && -e "$SYMLINK_PATH" ]]; then
        echo "–ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    elif [[ -e "$SYMLINK_PATH" && ! -L "$SYMLINK_PATH" ]]; then
          echo "–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Å –∏–º–µ–Ω–µ–º '$SYMLINK_PATH' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π."
          echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É."
    else
        echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞..."
        if [[ -d "/usr/local/bin" && -w "/usr/local/bin" ]]; then
            if ln -s "$SCRIPT_PATH" "$SYMLINK_PATH"; then
                echo -e "‚úÖ –ì–æ—Ç–æ–≤–æ.–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç—É –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π \e[1mrw-backup${RESET}"
            else
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π ln -s. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
            fi
        else
            echo "‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ /usr/local/bin –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º root."
            echo "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
        fi
    fi
    read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

if [[ $EUID -ne 0 ]]; then
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏."
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å sudo –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root."
    exit 1
fi

mkdir -p "$INSTALL_DIR" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ $INSTALL_DIR."; exit 1; }
mkdir -p "$BACKUP_DIR" || { echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ $BACKUP_DIR."; exit 1; }


install_dependencies

load_or_create_config

if [[ "$1" == "backup" ]]; then
    echo "–ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é..."
    create_backup
    exit 0
fi

main_menu() {
    while true; do
        clear
        print_ascii_art
        echo "=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==="
        echo "1) –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é"
        echo "2) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        echo "3) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"
        echo "4) –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∫—Ä–∏–ø—Ç—É"
        echo "5) –í—ã—Ö–æ–¥"
        read -rp "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: " choice
        case $choice in
            1) create_backup ; read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            2) setup_auto_send ;;
            3) restore_backup ; read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            4) setup_symlink ; read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            5) echo "–í—ã—Ö–æ–¥..."; exit 0 ;;
            *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥." ; read -rp "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
        esac
    done
}

echo "Starting main menu..."
main_menu
